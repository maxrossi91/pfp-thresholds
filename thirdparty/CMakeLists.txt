# Thirdparty libraries
include(FetchContent)
include(FetchContent_Install)

# Log directory for external content builds
make_directory(${CMAKE_CURRENT_BINARY_DIR}/logs)
set(INSTALL_FILE  ${CMAKE_CURRENT_BINARY_DIR}/install.cmake)


# Set environment

list(APPEND CMAKE_LIBRARY_PATH "${CMAKE_CURRENT_BINARY_DIR}/lib ")
list(APPEND CMAKE_INCLUDE_PATH "${CMAKE_CURRENT_BINARY_DIR}/include ")
list(APPEND CMAKE_PREFIX_PATH  "${CMAKE_CURRENT_BINARY_DIR}")

## Add malloc_count
FetchContent_Declare(
  malloc_count
  GIT_REPOSITORY https://github.com/bingmann/malloc_count
  )
  
FetchContent_GetProperties(malloc_count)
if(NOT malloc_count_POPULATED)
  FetchContent_Populate(malloc_count)

  add_library(malloc_count OBJECT ${malloc_count_SOURCE_DIR}/malloc_count.c ${malloc_count_SOURCE_DIR}/malloc_count.h)
  target_link_libraries(malloc_count dl)
  target_include_directories(malloc_count PUBLIC "${malloc_count_SOURCE_DIR}")

  add_library(memprofile OBJECT ${malloc_count_SOURCE_DIR}/memprofile.h)
  target_include_directories(memprofile PUBLIC "${malloc_count_SOURCE_DIR}")
endif()
  
## Add gsacak
FetchContent_Declare(
  gsacak
  GIT_REPOSITORY https://github.com/felipelouza/gsa-is.git
)

FetchContent_GetProperties(gsacak)
if(NOT gsacak_POPULATED)
    FetchContent_Populate(gsacak)
    add_library(gsacak OBJECT ${gsacak_SOURCE_DIR}/gsacak.c ${gsacak_SOURCE_DIR}/gsacak.h)
    target_include_directories(gsacak PUBLIC "${gsacak_SOURCE_DIR}")
    
    add_library(gsacak64 OBJECT ${gsacak_SOURCE_DIR}/gsacak.c ${gsacak_SOURCE_DIR}/gsacak.h)
    target_include_directories(gsacak64 PUBLIC "${gsacak_SOURCE_DIR}")
    target_compile_options(gsacak64 PUBLIC -DM64)
endif()

# DIVSUFSORT
find_library(DIVSUFSORT_LIB divsufsort HINTS ${CMAKE_CURRENT_BINARY_DIR}/lib PATHS ${CONDA_PREFIX}/lib)
if(NOT DIVSUFSORT_LIB)
    message(STATUS "divsufsort library not found. Building as an external content")
else()
    message(STATUS "divsufsort library found at ${DIVSUFSORT_LIB}.")
endif()

# DIVSUFSORT64
find_library(DIVSUFSORT64_LIB divsufsort64 HINTS ${CMAKE_CURRENT_BINARY_DIR}/lib PATHS ${CONDA_PREFIX}/lib)
if(NOT DIVSUFSORT64_LIB)
    message(STATUS "divsufsort64 library not found. Building as an external content")
else()
    message(STATUS "divsufsort64 library found at ${DIVSUFSORT64_LIB}.")
endif()

# SDSL
find_library(SDSL_LIB sdsl HINTS ${CMAKE_CURRENT_BINARY_DIR}/lib PATHS ${CONDA_PREFIX}/lib)
find_path(SDSL_SRC sdsl HINTS ${CMAKE_CURRENT_BINARY_DIR}/include PATHS ${CONDA_PREFIX}/include)
if(NOT SDSL_LIB)
    message(STATUS "sdsl library not found. Building as an external content")
    FetchContent_Declare(sdsl
            GIT_REPOSITORY "https://github.com/simongog/sdsl-lite.git"
            # GIT_TAG "v2.1.1"
    )

    if(NOT sdsl_POPULATED)
        FetchContent_Populate(sdsl)
        # Install in the current binary dir
        execute_process(COMMAND ./install.sh ${CMAKE_CURRENT_BINARY_DIR}
                RESULT_VARIABLE result
                WORKING_DIRECTORY ${sdsl_SOURCE_DIR} 
                OUTPUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/sdsl.log
                ERROR_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/sdsl.log)

        file(APPEND ${INSTALL_FILE} "MESSAGE(STATUS \"Installing sdsl.\")\n")
        file(APPEND ${INSTALL_FILE} "execute_process(COMMAND ./install.sh \${CMAKE_INSTALL_PREFIX}
                WORKING_DIRECTORY ${sdsl_SOURCE_DIR} 
                OUTPUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/sdsl.log
                ERROR_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/sdsl.log)\n")
        if(result)
            message(FATAL_ERROR "CMake step for sdsl-lite failed: ${result}")
        endif()
    endif()

    set(SDSL_SRC ${CMAKE_CURRENT_BINARY_DIR}/include)
    set(DIVSUFSORT_SRC ${CMAKE_CURRENT_BINARY_DIR}/include)
    set(SDSL_LIB ${CMAKE_CURRENT_BINARY_DIR}/lib/libsdsl.a)
    set(DIVSUFSORT_LIB ${CMAKE_CURRENT_BINARY_DIR}/lib/libdivsufsort.a)
    set(DIVSUFSORT64_LIB ${CMAKE_CURRENT_BINARY_DIR}/lib/libdivsufsort64.a)

else()
    message(STATUS "sdsl library found at ${SDSL_LIB}.")
    message(STATUS "sdsl sources found at ${SDSL_SRC}.")
endif()

if (NOT TARGET sdsl)
    add_library(sdsl STATIC IMPORTED GLOBAL)
    set_property(TARGET sdsl PROPERTY IMPORTED_LOCATION ${SDSL_LIB})
    target_include_directories(sdsl INTERFACE ${SDSL_SRC})
endif()

if (NOT TARGET divsufsort)  
    add_library(divsufsort STATIC IMPORTED GLOBAL)
    set_property(TARGET divsufsort PROPERTY IMPORTED_LOCATION ${DIVSUFSORT_LIB})
endif()

if (NOT TARGET divsufsort64)
    add_library(divsufsort64 STATIC IMPORTED GLOBAL)
    set_property(TARGET divsufsort64 PROPERTY IMPORTED_LOCATION ${DIVSUFSORT64_LIB})
endif()

# HTSLIB
find_library(HTS_LIB hts)
find_path(HTS_SRC htslib)
if(NOT HTS_LIB)
    message(STATUS "htslib library not found. Building as an external content.")
    FetchContent_Declare(htslib
            GIT_REPOSITORY "https://github.com/samtools/htslib"
            GIT_TAG "1.14"
    )

    if(NOT htslib_POPULATED)
        FetchContent_Populate(htslib)
        # Install in the current binary dir
        execute_process(COMMAND autoreconf -i
                RESULT_VARIABLE result
                WORKING_DIRECTORY ${htslib_SOURCE_DIR} 
                OUTPUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/htslib-autoreconf.log
                ERROR_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/htslib-autoreconf.log)
        if(result)
            message(FATAL_ERROR "CMake step for htslib failed: ${result}")
        endif()

        execute_process(COMMAND ./configure --prefix=${CMAKE_CURRENT_BINARY_DIR}
                RESULT_VARIABLE result
                WORKING_DIRECTORY ${htslib_SOURCE_DIR} 
                OUTPUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/htslib-configure.log
                ERROR_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/htslib-configure.log)
        if(result)
            message(FATAL_ERROR "CMake step for htslib failed: ${result}")
        endif()

        execute_process(COMMAND make
                RESULT_VARIABLE result
                WORKING_DIRECTORY ${htslib_SOURCE_DIR} 
                OUTPUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/htslib-make.log
                ERROR_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/htslib-make.log)
        if(result)
            message(FATAL_ERROR "CMake step for htslib failed: ${result}")
        endif()

        execute_process(COMMAND make install
                RESULT_VARIABLE result
                WORKING_DIRECTORY ${htslib_SOURCE_DIR} 
                OUTPUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/htslib-install.log
                ERROR_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/htslib-install.log)
        if(result)
            message(FATAL_ERROR "CMake step for htslib failed: ${result}")
        endif()

        file(APPEND ${INSTALL_FILE} "MESSAGE(STATUS \"Installing htslib.\")\n
                execute_process(COMMAND autoreconf -i
                WORKING_DIRECTORY ${htslib_SOURCE_DIR} 
                OUTPUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/htslib-autoreconf.log
                ERROR_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/htslib-autoreconf.log)\n
                execute_process(COMMAND ./configure --prefix=\${CMAKE_INSTALL_PREFIX}
                WORKING_DIRECTORY ${htslib_SOURCE_DIR} 
                OUTPUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/htslib-configure.log
                ERROR_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/htslib-configure.log)\n
                execute_process(COMMAND make
                WORKING_DIRECTORY ${htslib_SOURCE_DIR} 
                OUTPUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/htslib-make.log
                ERROR_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/htslib-make.log)\n
                execute_process(COMMAND make install
                WORKING_DIRECTORY ${htslib_SOURCE_DIR} 
                OUTPUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/htslib-install.log
                ERROR_FILE ${CMAKE_CURRENT_BINARY_DIR}/logs/htslib-install.log)\n")

    endif()

    set(HTS_SRC ${CMAKE_CURRENT_BINARY_DIR}/include)
    set(HTS_LIB ${CMAKE_CURRENT_BINARY_DIR}/lib/libsdsl.a)



else()
    message(STATUS "htslib library found at ${HTS_LIB}.")
    message(STATUS "htslib sources found at ${HTS_SRC}.")
endif()

if (NOT TARGET htslib)
    add_library(htslib STATIC IMPORTED GLOBAL)
    set_property(TARGET htslib PROPERTY IMPORTED_LOCATION ${HTS_LIB})
    target_include_directories(htslib INTERFACE ${HTS_SRC})
endif()

# PFP++
find_program(PFP pfp++)
if(NOT PFP)
    message(STATUS "pfp not found. Building as an external content.")
    FetchContent_Declare(pfp
            GIT_REPOSITORY "https://github.com/maxrossi91/pfp"
            GIT_TAG leviosam_integration
    )

    if(NOT pfp_POPULATED)
        FetchContent_Populate(pfp)
        FetchContent_Install(   pfp  
                                SOURCE ${pfp_SOURCE_DIR} 
                                BINARY ${pfp_BINARY_DIR} 
                                DESTINATION ${CMAKE_CURRENT_BINARY_DIR} 
                                LOG ${CMAKE_CURRENT_BINARY_DIR}/logs
                                FILE ${INSTALL_FILE})

    endif()
    set(PFP ${CMAKE_CURRENT_BINARY_DIR}/bin/pfp++ GLOBAL)

    
else()
    message(STATUS "pfp found at ${PFP}.")
endif()


if(${COMPILE_BWT2LCP})
  ## Add rlbwt2lcp
  FetchContent_Declare(
    rlbwt2lcp
    GIT_REPOSITORY https://github.com/nicolaprezza/rlbwt2lcp
  )

  FetchContent_GetProperties(rlbwt2lcp)
  if(NOT rlbwt2lcp_POPULATED)
    FetchContent_Populate(rlbwt2lcp)

    add_subdirectory(${rlbwt2lcp_SOURCE_DIR} ${rlbwt2lcp_BINARY_DIR} )
  endif()

  ## Add bwt2lcp
  FetchContent_Declare(
    bwt2lcp
    GIT_REPOSITORY https://github.com/nicolaprezza/bwt2lcp
  )

  FetchContent_GetProperties(bwt2lcp)
  if(NOT bwt2lcp_POPULATED)
    FetchContent_Populate(bwt2lcp)

    add_subdirectory(${bwt2lcp_SOURCE_DIR} ${bwt2lcp_BINARY_DIR} )
  endif()
endif()

# install(SCRIPT ${INSTALL_FILE})